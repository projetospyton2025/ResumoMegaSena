

# app.py
from flask import Flask, render_template
import requests
import json
from datetime import datetime, timedelta
# import locale
import os

app = Flask(__name__)

# Configurar localização para português brasileiro
# locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# APIs disponíveis
# A API da Caixa está funcionando e deve ser a primeira opção
API_CAIXA = 'https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena'
API_HEROKU = 'https://loteriascaixa-api.herokuapp.com/api'  # API do Heroku como segunda opção

def format_currency(value):
    try:
        # Converter para float
        if isinstance(value, str):
            value = float(value.replace(',', '.'))
        else:
            value = float(value)
            
        # Formatar primeiro com ponto para milhares e ponto para decimal
        formatted = '{:,.2f}'.format(value)
        
        # Substituir para o padrão brasileiro:
        # 1. Primeiro troca a vírgula por um marcador temporário
        # 2. Depois troca o ponto por vírgula
        # 3. Por fim, troca o marcador temporário por ponto
        formatted = formatted.replace(',', '|').replace('.', ',').replace('|', '.')
        
        return formatted
    except:
        return '0,00'

def get_concurso_heroku(numero=None):
    """Tenta obter dados da API do Heroku"""
    try:
        if numero is not None:
            url = f'{API_HEROKU}/megasena/{numero}'
        else:
            url = f'{API_HEROKU}/megasena/latest'
        
        print(f"Tentando acessar URL Heroku: {url}")
        response = requests.get(url, timeout=10)
        print(f"Status da resposta Heroku: {response.status_code}")
        
        if response.status_code != 200:
            print(f"Erro na API do Heroku: Status {response.status_code}")
            return None
            
        try:
            data = response.json()
            
            # Verificar se os campos obrigatórios existem
            campos_requeridos = ['concurso', 'data', 'dezenas', 'acumulou', 'local', 'premiacoes',
                                'dataProximoConcurso', 'proximoConcurso', 'valorEstimadoProximoConcurso']
            
            for campo in campos_requeridos:
                if campo not in data:
                    print(f"API Heroku: Campo obrigatório '{campo}' ausente na resposta")
                    return None
                    
            try:
                premiacoes = {premio['descricao']: premio for premio in data['premiacoes']}
                
                # Verificar se existem todas as premiações necessárias
                premiacoes_requeridas = ['6 acertos', '5 acertos', '4 acertos']
                for p in premiacoes_requeridas:
                    if p not in premiacoes:
                        print(f"API Heroku: Premiação '{p}' ausente na resposta")
                        return None
                        
                return {
                    'numero': int(data['concurso']),
                    'data': data['data'],
                    'numeros': [int(num) for num in data['dezenas']],
                    'numeros_ordem_sorteio': [int(num) for num in data.get('dezenasOrdemSorteio', data['dezenas'])],
                    'acumulou': data['acumulou'],
                    'local_sorteio': data['local'],
                    'ganhadores': {
                        'sena': int(premiacoes['6 acertos']['ganhadores']),
                        'quina': int(premiacoes['5 acertos']['ganhadores']),
                        'quadra': int(premiacoes['4 acertos']['ganhadores'])
                    },
                    'premios': {
                        'sena': float(premiacoes['6 acertos'].get('valorPremio', 0)),
                        'quina': float(premiacoes['5 acertos'].get('valorPremio', 0)),
                        'quadra': float(premiacoes['4 acertos'].get('valorPremio', 0))
                    },
                    'proximo_concurso': {
                        'data': data['dataProximoConcurso'],
                        'numero': int(data['proximoConcurso']),
                        'estimativa_premio': float(data['valorEstimadoProximoConcurso'])
                    }
                }
            except Exception as e:
                print(f"Erro ao processar dados da API Heroku: {str(e)}")
                return None
        except Exception as e:
            print(f"Erro ao carregar JSON da API Heroku: {str(e)}")
            return None
    except Exception as e:
        print(f"Erro API Heroku para concurso {numero}: {str(e)}")
        return None

def get_concurso_caixa(numero=None):
    """Tenta obter dados da API da Caixa"""
    try:
        # Para a API da Caixa, a URL base é a mesma, mas podemos adicionar o parâmetro concurso
        url = API_CAIXA
        if numero is not None:
            url = f"{url}?concurso={numero}"
        
        print(f"Tentando acessar URL Caixa: {url}")
        response = requests.get(url, timeout=10)
        print(f"Status da resposta Caixa: {response.status_code}")
        
        if response.status_code != 200:
            print(f"Erro na API da Caixa: Status {response.status_code}")
            return None
            
        try:
            data = response.json()
            
            # A estrutura da API da Caixa é diferente da API do Heroku
            try:
                # Obter as dezenas ordenadas
                dezenas_ordenadas = [int(num) for num in data.get('listaDezenas', [])]
                if not dezenas_ordenadas and 'dezenasSorteadasOrdemSorteio' in data:
                    dezenas_ordenadas = [int(num) for num in data.get('dezenasSorteadasOrdemSorteio', [])]
                
                # Obter as dezenas na ordem do sorteio
                dezenas_sorteio = [int(num) for num in data.get('dezenasSorteadasOrdemSorteio', [])]
                if not dezenas_sorteio:
                    dezenas_sorteio = dezenas_ordenadas
                
                # Processar estrutura de prêmios
                premiacoes = data.get('listaRateioPremio', [])
                
                # Organizar os prêmios por faixa
                premios_por_faixa = {p.get('faixa'): p for p in premiacoes}
                
                # Data formatada
                data_apuracao = data.get('dataApuracao', '')
                if data_apuracao:
                    try:
                        data_formatada = datetime.strptime(data_apuracao, '%d/%m/%Y').strftime('%d/%m/%Y')
                    except:
                        data_formatada = data_apuracao
                else:
                    data_formatada = datetime.now().strftime('%d/%m/%Y')
                
                # Data do próximo concurso
                data_proximo = data.get('dataProximoConcurso', '')
                if not data_proximo:
                    data_proximo = (datetime.now() + timedelta(days=3)).strftime('%d/%m/%Y')
                
                # Verificar se acumulou (quando não há ganhadores na faixa 1 - 6 acertos)
                sena_ganhadores = 0
                if 1 in premios_por_faixa:
                    sena_ganhadores = premios_por_faixa[1].get('numeroDeGanhadores', 0)
                acumulou = sena_ganhadores == 0
                
                # Valores dos prêmios por faixa
                sena_valor = premios_por_faixa.get(1, {}).get('valorPremio', 0) 
                quina_valor = premios_por_faixa.get(2, {}).get('valorPremio', 0)
                quadra_valor = premios_por_faixa.get(3, {}).get('valorPremio', 0)
                
                # Número de ganhadores por faixa
                quina_ganhadores = premios_por_faixa.get(2, {}).get('numeroDeGanhadores', 0)
                quadra_ganhadores = premios_por_faixa.get(3, {}).get('numeroDeGanhadores', 0)
                
                return {
                    'numero': int(data.get('numero', 0)),
                    'data': data_formatada,
                    'numeros': dezenas_ordenadas,
                    'numeros_ordem_sorteio': dezenas_sorteio,
                    'acumulou': acumulou,
                    'local_sorteio': data.get('localSorteio', 'Espaço da Sorte'),
                    'ganhadores': {
                        'sena': int(sena_ganhadores),
                        'quina': int(quina_ganhadores),
                        'quadra': int(quadra_ganhadores)
                    },
                    'premios': {
                        'sena': float(sena_valor),
                        'quina': float(quina_valor),
                        'quadra': float(quadra_valor)
                    },
                    'proximo_concurso': {
                        'data': data_proximo,
                        'numero': int(data.get('numeroConcursoProximo', 0)),
                        'estimativa_premio': float(data.get('valorEstimadoProximoConcurso', 0))
                    }
                }
            except Exception as e:
                print(f"Erro ao processar dados da API da Caixa: {str(e)}")
                return None
        except Exception as e:
            print(f"Erro ao carregar JSON da API da Caixa: {str(e)}")
            return None
    except Exception as e:
        print(f"Erro API Caixa para concurso {numero}: {str(e)}")
        return None

def get_concurso(numero=None):
    """Tenta obter concurso, primeiro da API da Caixa, depois da API do Heroku"""
    try:
        # Garantir que numero seja None ou um inteiro
        if numero is not None:
            try:
                numero = int(numero)
            except (ValueError, TypeError):
                print(f"Número de concurso inválido: {numero}")
                numero = None
        
        print(f"Buscando concurso {numero if numero is not None else 'mais recente'}")
        
        # Tenta primeiro a API da Caixa (já que está funcionando conforme demonstrado)
        print("Tentando API da Caixa...")
        resultado = get_concurso_caixa(numero)
        if resultado:
            print("Sucesso com API da Caixa")
            return resultado
            
        # Se falhar, tenta a API do Heroku como segunda opção
        print("API da Caixa falhou. Tentando API do Heroku...")
        resultado = get_concurso_heroku(numero)
        if resultado:
            print("Sucesso com API do Heroku")
            return resultado
            
        print("Ambas as APIs falharam")
    except Exception as e:
        print(f"Erro em get_concurso: {str(e)}")
        # Continue para fornecer dados mockados
    
    # Se ambas falharem, retorna um conjunto de dados mockados para evitar quebrar o site
    # Isso é útil para desenvolvimento e testes quando as APIs estão fora do ar
    print("Gerando dados de mock como último recurso")
    
    # Garantir que numero seja um inteiro válido
    numero_concurso = 2600
    if numero is not None:
        try:
            numero_concurso = int(numero)
        except (ValueError, TypeError):
            print(f"Erro ao converter número do concurso: {numero}")
            
    # Gerar concurso mock
    return {
        'numero': numero_concurso,
        'data': datetime.now().strftime('%d/%m/%Y'),
        'numeros': [10, 20, 30, 40, 50, 60],
        'numeros_ordem_sorteio': [10, 20, 30, 40, 50, 60],
        'acumulou': True,
        'local_sorteio': 'Espaço da Sorte (MOCK - APIs indisponíveis)',
        'ganhadores': {
            'sena': 0,
            'quina': 50,
            'quadra': 3000
        },
        'premios': {
            'sena': 0,
            'quina': 50000.00,
            'quadra': 1000.00
        },
        'proximo_concurso': {
            'data': (datetime.now() + timedelta(days=3)).strftime('%d/%m/%Y'),
            'numero': numero_concurso + 1,
            'estimativa_premio': 150000000.00
        }
    }

@app.route('/')
def index():
    try:
        # Buscar exatamente 6 resultados (concursos) como no código original
        concursos = []
        
        # Buscar o último concurso primeiro
        ultimo_concurso = get_concurso()
        if not ultimo_concurso:
            # Se não conseguiu nada, criar um concurso mock como último recurso
            ultimo_concurso = {
                'numero': 2600,
                'data': datetime.now().strftime('%d/%m/%Y'),
                'numeros': [10, 20, 30, 40, 50, 60],
                'numeros_ordem_sorteio': [10, 20, 30, 40, 50, 60],
                'acumulou': True,
                'local_sorteio': 'Espaço da Sorte (MOCK - APIs indisponíveis)',
                'ganhadores': {'sena': 0, 'quina': 50, 'quadra': 3000},
                'premios': {'sena': 0, 'quina': 50000.00, 'quadra': 1000.00},
                'proximo_concurso': {
                    'data': (datetime.now() + timedelta(days=3)).strftime('%d/%m/%Y'),
                    'numero': 2601,
                    'estimativa_premio': 150000000.00
                }
            }
        
        concursos.append(ultimo_concurso)
            
        # Garantir que número_atual seja um inteiro válido
        numero_atual = int(ultimo_concurso.get('numero', 2600))
        
        # Buscar concursos anteriores até ter 6 no total (ou seja, buscar mais 5)
        max_tentativas = 15  # Aumentado para garantir encontrar concursos suficientes
        i = 1
        while len(concursos) < 6 and i <= max_tentativas:
            try:
                concurso_num = numero_atual - i
                if concurso_num > 0:
                    concurso = get_concurso(concurso_num)
                    if concurso:
                        concursos.append(concurso)
                        print(f"Adicionado concurso {concurso_num}, total agora: {len(concursos)}")
                    else:
                        print(f"Concurso {concurso_num} não encontrado")
            except Exception as e:
                print(f"Erro ao buscar concurso {numero_atual - i}: {str(e)}")
            i += 1
        
        print(f"Total de concursos obtidos: {len(concursos)}")
                
        return render_template('index.html', concursos=concursos, format_currency=format_currency, get_weekday=get_weekday)
                
        return render_template('index.html', concursos=concursos, format_currency=format_currency, get_weekday=get_weekday)
        
    except Exception as e:
        return render_template('error.html', error="Erro: " + str(e))


# Adicione esta nova função para obter o dia da semana:
def get_weekday(date_str):
    try:
        # Converter string de data para objeto datetime
        data = datetime.strptime(date_str, '%d/%m/%Y')
        
        # Dias da semana em português
        dias_semana = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom']
        
        # Retornar o dia da semana formatado (0 = Segunda, 1 = Terça, etc)
        return dias_semana[data.weekday()]
    except Exception as e:
        print(f"Erro ao obter dia da semana: {str(e)}")
        return ""

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)