O CÓDIGO ESTA RODANTO PERFEITAMENTE NÃO PRECISA ALTERAR NADA....
APENAS O FORMATO DA MOEDA BRASILEIRA NÃO ESTÁ SENDO APLICADO.. 

R$ 130000000.00   correto  R$ 130.000.000,00
R$ 120000000.00   correto  R$ 120.000.000,00
R$ 53000000.00    correto  R$  53.000.000,00

123.456.789,00 positivo
-123.456.789,00 negativo



Concurso 2832

22/02/2025
02
12
18
21
24
37

ACUMULOU!

Prêmio estimado: R$ 130000000.00
Sena: 0 R$ 0.00
Quina: 238 R$ 32222.01
Quadra: 14573 R$ 751.76
ESPAÇO DA SORTE em SÃO PAULO, SP

Próximo: 25/02/2025

R$ 130000000.00


#ESTRUTURA
PS I:\Meu Drive\LoteriasCaixaSites\Loterias-Resumo\ResumoMegaSena> dir


    Diretório: I:\Meu Drive\LoteriasCaixaSites\Loterias-Resumo\ResumoMegaSena


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/02/2025     10:23                Requisitos
d-----        23/02/2025     10:15                templates
d-----        23/02/2025     09:34                static
d-----        23/02/2025     09:34                venv
------        23/02/2025     08:41           1096 LICENSE
------        23/02/2025     08:41             17 README.md
------        23/02/2025     09:33           7485 resumo-megasena.ps1
------        23/02/2025     10:15             65 requirements.txt
------        23/02/2025     11:16           3455 app.py


PS I:\Meu Drive\LoteriasCaixaSites\Loterias-Resumo\ResumoMegaSena>


#REQUIREMENTS.TXT
Flask==2.0.1
Werkzeug==2.0.1
Jinja2==3.0.1
requests==2.31.0

# app.py
from flask import Flask, render_template
import requests
import json
from datetime import datetime
import locale

app = Flask(__name__)

# Configurar localização para português brasileiro
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

def format_currency(value):
    try:
        # Converter para float
        if isinstance(value, str):
            value = float(value.replace(',', '.'))
        else:
            value = float(value)
            
        # Formatar primeiro com ponto para milhares e ponto para decimal
        formatted = '{:,.2f}'.format(value)
        
        # Substituir para o padrão brasileiro:
        # 1. Primeiro troca a vírgula por um marcador temporário
        # 2. Depois troca o ponto por vírgula
        # 3. Por fim, troca o marcador temporário por ponto
        formatted = formatted.replace(',', '|').replace('.', ',').replace('|', '.')
        
        return formatted
    except:
        return '0,00'

def get_concurso(numero=None):
    try:
        if numero:
            url = f'https://loteriascaixa-api.herokuapp.com/api/megasena/{numero}'
        else:
            url = 'https://loteriascaixa-api.herokuapp.com/api/megasena/latest'
        
        response = requests.get(url)
        data = response.json()
        
        premiacoes = {premio['descricao']: premio for premio in data['premiacoes']}
        
        return {
            'numero': data['concurso'],
            'data': data['data'],
            'numeros': [int(num) for num in data['dezenas']],
            'numeros_ordem_sorteio': [int(num) for num in data['dezenasOrdemSorteio']],
            'acumulou': data['acumulou'],
            'local_sorteio': data['local'],
            'ganhadores': {
                'sena': premiacoes['6 acertos']['ganhadores'],
                'quina': premiacoes['5 acertos']['ganhadores'],
                'quadra': premiacoes['4 acertos']['ganhadores']
            },
            'premios': {
                'sena': float(premiacoes['6 acertos']['valorPremio']),
                'quina': float(premiacoes['5 acertos']['valorPremio']),
                'quadra': float(premiacoes['4 acertos']['valorPremio'])
            },
            'proximo_concurso': {
                'data': data['dataProximoConcurso'],
                'numero': data['proximoConcurso'],
                'estimativa_premio': float(data['valorEstimadoProximoConcurso'])
            }
        }
    except Exception as e:
        print(f"Erro ao buscar concurso {numero}: {str(e)}")
        return None

@app.route('/')
def index():
    try:
        # Buscar o último concurso primeiro
        ultimo_concurso = get_concurso()
        if not ultimo_concurso:
            raise Exception("Não foi possível obter o último concurso")
            
        # Buscar os 5 concursos anteriores
        numero_atual = ultimo_concurso['numero']
        concursos = [ultimo_concurso]
        
        for i in range(1, 6):
            concurso = get_concurso(numero_atual - i)
            if concurso:
                concursos.append(concurso)
                
        return render_template('index.html', concursos=concursos, format_currency=format_currency)
        
    except Exception as e:
        return render_template('error.html', error="Erro: " + str(e))

if __name__ == '__main__':
    app.run(debug=True)


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resultados Mega-Sena</title>
    <script src="https://kit.fontawesome.com/afb02bf9ac.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Mega-Sena</h1>
            <h2>Últimos Resultados</h2>
        </div>

        <div class="grid-container">
            {% for sorteio in concursos %}
            <div class="concurso-card">
                <div class="card-header">
                    <h3>Concurso {{ sorteio.numero }}</h3>
                    <p class="data">{{ sorteio.data }}</p>
                </div>

                <div class="numeros">
                    {% for numero in sorteio.numeros %}
                    <div class="numero">{{ "%02d"|format(numero) }}</div>
                    {% endfor %}
                </div>

                <div class="status-premio">
                    <p class="acumulou-text {% if sorteio.acumulou %}acumulado{% endif %}">
                        {{ "ACUMULOU!" if sorteio.acumulou else "PREMIADO!" }}
                    </p>
                    <p class="premio-principal">
                        {% if sorteio.acumulou %}
                        Prêmio estimado: R$ {{ "%.2f"|format(sorteio.proximo_concurso.estimativa_premio) }}
                        {% else %}
                        {{ sorteio.ganhadores.sena }} ganhador(es) - R$ {{ "%.2f"|format(sorteio.premios.sena) }}
                        {% endif %}
                    </p>
                </div>

                <div class="premiacoes">
                    <div class="premiacao-item">
                        <i class="fas fa-trophy"></i>
                        <span>Sena: {{ sorteio.ganhadores.sena }}</span>
                        <span>R$ {{ "%.2f"|format(sorteio.premios.sena) }}</span>
                    </div>
                    <div class="premiacao-item">
                        <i class="fas fa-star"></i>
                        <span>Quina: {{ sorteio.ganhadores.quina }}</span>
                        <span>R$ {{ "%.2f"|format(sorteio.premios.quina) }}</span>
                    </div>
                    <div class="premiacao-item">
                        <i class="fas fa-check-circle"></i>
                        <span>Quadra: {{ sorteio.ganhadores.quadra }}</span>
                        <span>R$ {{ "%.2f"|format(sorteio.premios.quadra) }}</span>
                    </div>
                </div>

                <div class="local">
                    <i class="fas fa-map-marker-alt"></i>
                    <span>{{ sorteio.local_sorteio }}</span>
                </div>

                {% if loop.first %}
                <div class="proximo-sorteio">
                    <p><i class="fas fa-calendar-alt"></i> Próximo: {{ sorteio.proximo_concurso.data }}</p>
                    <p class="estimativa">R$ {{ "%.2f"|format(sorteio.proximo_concurso.estimativa_premio) }}</p>
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
    </div>
</body>
</html>

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

body {
    background-color: #f0f0f0;
}

.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
}

.header {
    text-align: center;
    margin-bottom: 30px;
    color: #1b5e20;
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
    margin: 0 auto;
}

.concurso-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: transform 0.2s;
}

.concurso-card:hover {
    transform: translateY(-5px);
}

.card-header {
    text-align: center;
    margin-bottom: 15px;
}

.card-header h3 {
    color: #1b5e20;
    font-size: 1.3em;
}

.data {
    color: #666;
    font-size: 0.9em;
    margin-top: 5px;
}

.numeros {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin: 15px 0;
    flex-wrap: wrap;
}

.numero {
    width: 35px;
    height: 35px;
    background: #1b5e20;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 0.9em;
}

.status-premio {
    text-align: center;
    margin: 15px 0;
    padding: 10px;
    background: #f8f8f8;
    border-radius: 5px;
}

.acumulou-text {
    font-size: 1.1em;
    font-weight: bold;
    color: #1b5e20;
}

.acumulou-text.acumulado {
    color: #d32f2f;
}

.premio-principal {
    font-size: 1em;
    color: #333;
    margin-top: 5px;
}

.premiacoes {
    margin: 15px 0;
}

.premiacao-item {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 8px 0;
    font-size: 0.9em;
}

.premiacao-item i {
    color: #1b5e20;
    width: 20px;
}

.local {
    text-align: center;
    color: #666;
    font-size: 0.9em;
    margin-top: 15px;
}

.local i {
    margin-right: 5px;
    color: #1b5e20;
}

.proximo-sorteio {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px dashed #ddd;
    text-align: center;
}

.proximo-sorteio p {
    margin: 5px 0;
}

.estimativa {
    color: #1b5e20;
    font-weight: bold;
    font-size: 1.1em;
    margin-top: 5px;
}

@media (max-width: 1200px) {
    .grid-container {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 800px) {
    .grid-container {
        grid-template-columns: 1fr;
    }
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Erro - Mega-Sena</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Erro</h1>
        </div>
        <div class="card">
            <h3>Ocorreu um erro</h3>
            <p>{{ error }}</p>
            <p><a href="/">Tentar novamente</a></p>
        </div>
    </div>
</body>
</html>